#!/bin/bash

set -uo pipefail

WIZ_DIR="$HOME/.wiz"
SCAN_TYPE="${BUILDKITE_PLUGIN_WIZ_SCAN_TYPE:-}"
FILE_PATH="${BUILDKITE_PLUGIN_WIZ_PATH:-}"
PARAMETER_FILES="${BUILDKITE_PLUGIN_WIZ_PARAMETER_FILES:-}"
IAC_TYPE="${BUILDKITE_PLUGIN_WIZ_IAC_TYPE:-}"
OUTPUT_FORMAT="${BUILDKITE_PLUGIN_WIZ_OUTPUT_FORMAT:=human}"
ADDITIONAL_OUTPUT="${BUILDKITE_PLUGIN_WIZ_ADDITIONAL_OUTPUT:-}"
SHOW_SECRET_SNIPPETS="${BUILDKITE_PLUGIN_WIZ_SHOW_SECRET_SNIPPETS:=false}"

if [[ -z "${SCAN_TYPE}" ]]; then
    echo "+++ ðŸš¨ Missing scan type. Possible values: 'iac', 'docker', 'dir'"
    exit 1
fi

if [[ "${SCAN_TYPE}" == "docker" && -z "${BUILDKITE_PLUGIN_WIZ_IMAGE_ADDRESS:-}" ]]; then
    echo "+++ ðŸš¨ Missing image address, docker scans require an address to pull the image"
    exit 1
fi

api_secret_var="${BUILDKITE_PLUGIN_WIZ_API_SECRET_ENV:-WIZ_API_SECRET}"

if [[ -z "${!api_secret_var:-}" ]]; then
    echo "+++ ðŸš¨ No Wiz API Secret password found in \$${api_secret_var}"
    exit 1
fi

##
# Wiz CLI Parameters
##

args=()

## Global Parameters

if [[ "${SHOW_SECRET_SNIPPETS}" == "true" ]]; then
    args+=("--show-secret-snippets")
fi

output_formats=("human" "json" "sarif" "csv-zip")
if [[ ${output_formats[*]} =~ ${OUTPUT_FORMAT} ]]; then
    args+=("--format=${OUTPUT_FORMAT}")
else
    echo "+++ ðŸš¨ Invalid Output Format: ${OUTPUT_FORMAT}"
    echo "Valid Formats: ${output_formats[*]}"
    exit 1
fi

if [[ -n "${ADDITIONAL_OUTPUT}" ]]; then
    if [[ ${output_formats[*]} =~ ${ADDITIONAL_OUTPUT} ]]; then
        args+=("--output=/scan/result/output.${ADDITIONAL_OUTPUT},${ADDITIONAL_OUTPUT}")
    else
        echo "+++ ðŸš¨ Invalid Additional Output Format: ${ADDITIONAL_OUTPUT}"
        echo "Valid Formats: ${output_formats[*]}"
        exit 1
    fi
fi

## IAC Scanning Parameters

if [[ "${SCAN_TYPE}" == "iac" ]]; then

    if [[ -n "${IAC_TYPE}" ]]; then
        args+=("--types=${IAC_TYPE}")
    fi

    if [[ -n "${PARAMETER_FILES}" ]]; then
        args+=("--parameter-files=${PARAMETER_FILES}")
    fi
fi

# Get the architecture of the machine for running the container image due to "latest" not being multi-architecture
# Available images: `latest`, `latest-amd64` and `latest-arm64`
# therefore default case will use `latest`

architecture=$(uname -m)
container_image_tag="latest"

case $architecture in
x86_64)
    container_image_tag+="-amd64"
    ;;
arm64 | aarch64)
    container_image_tag+="-arm64"
    ;;
*) ;;
esac

wiz_cli_container_repository="wiziocli.azurecr.io/wizcli"
wiz_cli_container="${wiz_cli_container_repository}:${container_image_tag}"

#TODO move this to agent-startup so all agents have wiz setup to save time, possibly directly as cli
setupWiz() {
    echo "Setting up and authenticating wiz"
    mkdir -p "$WIZ_DIR"
    docker run \
        --rm -it \
        --mount type=bind,src="${WIZ_DIR}",dst=/cli \
        "${wiz_cli_container}" \
        auth --id="${WIZ_API_ID}" --secret="${!api_secret_var}"
    # check that wiz-auth work expected, and a file in WIZ_DIR is created
    if [ -z "$(ls -A "${WIZ_DIR}")" ]; then
        echo "Wiz authentication failed, please confirm that credentials are set for WIZ_API_ID and WIZ_API_SECRET"
        exit 1
    else
        echo "Authenticated successfully"
    fi
}

#$1 type, $2 name, $3 pass/fail, $4 result file
buildAnnotation() {
    annotation_file=${RANDOM:0:2}-annotation.md
    docker_or_iac=$(if [ "$1" = "docker" ]; then echo "Wiz Docker Image Scan"; else echo "Wiz IaC Scan"; fi)
    pass_or_fail=$(if [ "$3" = true ]; then echo 'meets'; else echo 'does not meet'; fi)
    summary="${docker_or_iac} for ${2} ${pass_or_fail} policy requirements"
    # we need to create a new file to avoid conflicts, we need scan type, name, pass/fail
    cat <<EOF >>./"${annotation_file}"
<details>
<summary>$summary.</summary>

\`\`\`term
$(cat "$4")
\`\`\`

</details>
EOF
    printf "%b\n" "$(cat ./"${annotation_file}")"
}

dockerImageScan() {
    # TODO check feasibility of mount/mountWithLayers
    IMAGE="${BUILDKITE_PLUGIN_WIZ_IMAGE_ADDRESS:-}"
    # make sure local docker has the image
    docker pull "$IMAGE"
    docker run \
        --rm -it \
        --mount type=bind,src="$WIZ_DIR",dst=/cli,readonly \
        --mount type=bind,src="$PWD",dst=/scan \
        --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock,readonly \
        "${wiz_cli_container}" \
        docker scan --image "$IMAGE" \
        --policy-hits-only \
        -o /scan/result,human,true ${args:+"${args[@]}"}

    exit_code="$?"
    image_name=$(echo "$IMAGE" | cut -d "/" -f 2)
    # FIXME: Linktree Specific Env. Var.
    # buildkite-agent artifact upload result --log-level info
    case $exit_code in
    0)
        buildAnnotation "docker" "$image_name" true "$PWD/result" | buildkite-agent annotate --append --style 'success' --context 'ctx-wiz-docker-success'
        ;;
    *)
        buildAnnotation "docker" "$image_name" false "$PWD/result" | buildkite-agent annotate --append --context 'ctx-wiz-docker-warning' --style 'warning'
        ;;
    esac
    exit $exit_code
}

iacScan() {
    mkdir -p result
    docker run \
        --rm -it \
        --mount type=bind,src="$WIZ_DIR",dst=/cli,readonly \
        --mount type=bind,src="$PWD",dst=/scan \
        "${wiz_cli_container}" \
        iac scan \
        -o /scan/result/output,human \
        --name "$BUILDKITE_JOB_ID" \
        --path "/scan/$FILE_PATH" ${args:+"${args[@]}"}

    exit_code="$?"
    case $exit_code in
    0)
        buildAnnotation "iac" "$BUILDKITE_LABEL" true "result/output" | buildkite-agent annotate --append --context 'ctx-wiz-iac-success' --style 'success'
        ;;
    *)
        buildAnnotation "iac" "$BUILDKITE_LABEL" false "result/output" | buildkite-agent annotate --append --context 'ctx-wiz-iac-warning' --style 'warning'
        ;;
    esac
    # buildkite-agent artifact upload "result/**/*" --log-level info
    # this post step will be used in template to check the step was run
    echo "${BUILDKITE_BUILD_ID}" >check-file && buildkite-agent artifact upload check-file

    exit $exit_code
}

dirScan() {
    mkdir -p result
    docker run \
        --rm -it \
        --mount type=bind,src="$WIZ_DIR",dst=/cli,readonly \
        --mount type=bind,src="$PWD",dst=/scan \
        "${wiz_cli_container}" \
        dir scan \
        -o /scan/result/output,human \
        --name "$BUILDKITE_JOB_ID" \
        --path "/scan/$FILE_PATH" ${args:+"${args[@]}"}

    exit_code="$?"
    case $exit_code in
    0)
        buildAnnotation "dir" "$BUILDKITE_LABEL" true "result/output" | buildkite-agent annotate --append --context 'ctx-wiz-dir-success' --style 'success'
        ;;
    *)
        buildAnnotation "dir" "$BUILDKITE_LABEL" false "result/output" | buildkite-agent annotate --append --context 'ctx-wiz-dir-warning' --style 'warning'
        ;;
    esac
    # buildkite-agent artifact upload "result/**/*" --log-level info
    # this post step will be used in template to check the step was run
    echo "${BUILDKITE_BUILD_ID}" >check-file && buildkite-agent artifact upload check-file

    exit $exit_code
}

case "${SCAN_TYPE}" in
iac)
    setupWiz
    iacScan
    ;;
docker)
    setupWiz
    dockerImageScan
    ;;
dir)
    setupWiz
    dirScan
    ;;
esac
